#application mode[master|agent]
server.port=8085



# DB 접속정보, hikari
# 접속 url: http://api.acp.kt.co.kr:31611 (사외망only)
# ID/PW: acp/acp!@34
#youngdoo-kim-psql.pgo.svc.cluster.local
#psql -h youngdoo-kim-psql.pgo.svc.cluster.local -p 5432 -U acp youngdoo-kim-psql

# Spring data source needed for Spring boot to behave
# Pre Spring Boot v2.0.0.M6 without below Spring Boot defaults to tomcat-jdbc connection pool included 
# in spring-boot-starter-jdbc and as compiled dependency under spring-boot-starter-data-jpa
spring.datasource.type=com.zaxxer.hikari.HikariDataSource
spring.datasource.url=jdbc:postgresql://localhost:5432/postgres
#spring.datasource.url=jdbc:postgresql://api.acp.kt.co.kr:32115/youngdoo-kim-psql

spring.datasource.username=robotqat
spring.datasource.password=1234qwer

# Hikari will use the above plus the following to setup connection pooling
spring.datasource.hikari.minimumIdle=5
spring.datasource.hikari.maximumPoolSize=20
spring.datasource.hikari.idleTimeout=30000
spring.datasource.hikari.poolName=SpringBootJPAHikariCP
spring.datasource.hikari.maxLifetime=2000000
spring.datasource.hikari.connectionTimeout=30000

# Without below HikariCP uses deprecated com.zaxxer.hikari.hibernate.HikariConnectionProvider
# Surprisingly enough below ConnectionProvider is in hibernate-hikaricp dependency and not hibernate-core
# So you need to pull that dependency but, make sure to exclude it's transitive dependencies or you will end up 
# with different versions of hibernate-core 
spring.jpa.hibernate.connection.provider_class=org.hibernate.hikaricp.internal.HikariCPConnectionProvider

# JPA specific configs
spring.jpa.properties.hibernate.show_sql=true
spring.jpa.properties.hibernate.format_sql=true
spring.jpa.properties.hibernate.use_sql=true
spring.jpa.properties.hibernate.id.new_generator_mappings=false
spring.jpa.properties.hibernate.default_schema=littracker
spring.jpa.properties.hibernate.search.autoregister_listeners=false
spring.jpa.properties.hibernate.bytecode.use_reflection_optimizer=false

# Enable logging
logging.level.org.hibernate.SQL=DEBUG
# Enable logging for HikariCP to verify that it is used
logging.level.com.zaxxer.hikari.HikariConfig=DEBUG
logging.level.org.hibernate.type.descriptor.sql.BasicBinder=TRACE 



#mybatis
mybatis.configuration.cache-enabled=false
mybatis.configuration.use-generated-keys=true
mybatis.configuration.lazy-load-trigger-methods=false
mybatis.configuration.default-executor-type=reuse
mybatis.configuration.jdbc-type-for-null=null
mybatis.configuration.call-setters-on-nulls=true


####### JPA
#spring.datasource.url=jdbc:derby://localhost:1527/sample
#spring.datasource.username=user
#spring.datasource.password=1234
#spring.datasource.initialize=false
#spring.datasource.driver-class-name=org.apache.derby.jdbc.ClientDriver
    

logging.level.root = info

#git access token : o9CS2743aXGNwx6ZNxmE

## git repository properties
git.url=https://gitlab.dspace.kt.co.kr
git.access.token=o9CS2743aXGNwx6ZNxmE
git.checkout.base.dir.local=/Users/robotm4/gitbase/archivefile
git.checkout.base.dir.dev=/Users/robotm4/gitbase/archivefile
git.default.archive.file.format=zip
	

#git access token : o9CS2743aXGNwx6ZNxmE

### rabbitmq
rmq.qat.cluster.host=api.acp.kt.co.kr
rmq.qat.mqtt.port=9910
rmq.qat.amqp.port=9911
rmq.qat.exchange.name=xc.cmd.qat.topic
rmq.qat.que.name=que.cmd.qat
rmq.qat.user=qat
rmq.qat.pwd=qat12#$
rmq.qat.vhost=qavhost
rmq.qat.nework.recovery.interval=300000 //ms

#factory.setVirtualHost("qatvhost");
#factory.setNetworkRecoveryInterval(10000);
# minio : 9022, console : 9023
# mqtt : 9910(youngdoo-kim RBMQ)
# https : 9943


